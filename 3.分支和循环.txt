分支与循环
- C语言是一门结构化的程序设计语言
	1. 顺序结构
		普通语句结构
	2. 选择结构
		- if语句
		- switch语句
	3. 循环结构
		- for循环
		- while循环
		- do...while循环
- 我们以';'来分割每一条语句，只有';'的是空语句	
- 分支语句(选择结构)
	if语句：
	前面概述中已经讲过了，这里写它的多分支情况
		语法：		//和JS相同
			if(条件表达式){
				语句...
			}else if(条件表达式){
				语句...
			}else{
				语句...
			}
		注意：
			int a = 10;
			if(18<=a<28){		//不能这样写噢，如果这样写，它会先执行18<=a,返回false，即0，然后0<28，返回True，为True就会执行下面的代码
				printf("成年\n");	//我们前面的应该用逻辑与操作才能正确执行，即18<=a && a<28
			}
		- C语言中的代码时不注重缩进的，我们现在的缩进都是编译器出于美观自动调整的，所有我们要注意一些bug
			如：
				int a=10,b=20;
				if (a == 1) 
					if (b == 2)
						printf("aaa");	//这样的代码再python这种注意缩进的语言中，只要对齐了，它们就是一块的，C语言不是这样
				else		//这个else是属于离他最近的一个if语句，所有当前这个情况，a=10是什么也不会打印的
					printf("bbb");		//建议在if语句后面都加上'{}'来区分，这样就不会出错了
	
	switch语句：
	switch也是一种多分支语句，和if语句的多分支相比，有时候会更加方便
	语法：
		switch (整型表达式){		//这里写着整型表达式就代表只能输入整型噢~
			case 整型表达式常量:
				语句....
				break;
			case 整型表达式常量:	//case后面的数值也一定要是整型常量，不能是变量
				语句....			//当整型表达式的值是case后面的值时，执行语句
				break;			//每次执行完要跳出当前语句，不然后面的case语句也会执行
				//不过这里的break不是必须要写的噢~你要是想让他执行下面的代码就不用break
			default:		//如果上面case中的代码都不执行时执行这条语句下的代码
				语句....			并且dafault语句可以放在switch中的任意位置，同样可以正常执行噢
				break;
		}		
	
- 循环语句
	while循环
	前面已经大概的讲过，这里再补充以下几个语句
	- break；  //跳出循环体
	- continue    //跳出当前循环语句
	- getchar() 	//输入一个字符，如：char a = getchar();
	- putchar() 	//输出一个字符，如：putchar(a);  这里的效果和使用格式化字符串以后的printf一样
	- EOF		//文件结束标志，全程end of file，它的本质是 -1 这个值，当if一个
	需要注意，像scanf、getchar这种输入函数，需要打回车或者空格才能结束的，要注意以下bug：
	int main() {		//下面的程序看似好像没毛病，但实际上scanf输入完成之后要输入回车才会继续执行代码，而这个回车'\n'就会进入输入缓冲区
		char password[20] = { 0 }, y;
		int num = 0;
		
		printf("请输入密码：");
		scanf("%s", password);
		printf("是否确认密码(Y/N)：");
		y = getchar();		//当输入缓冲区有数据的时候，输入函数会优先向输入缓冲区读取数据，而前面的scanf只把密码读走了，'\n'还在，这里就会读取'\n'，导致程序错误
		if (y == 'Y') {
			printf("确认成功！");
		}
		else {
			printf("程序结束");
		}
			return 0;
	}	
	所以我们可以如下这样修改：
	int main() {
		char password[20] = { 0 }, ch, y;
		int num = 0;

		printf("请输入密码：");
		scanf("%s", password);
		while ((ch = getchar()) != '\n') { ; }			//这里加入循环，如果输入缓冲区的字符等于'\n'了，就说明输入缓冲区为空，就可以接着执行代码了
		printf("是否确认密码(Y/N)：");
		y = getchar();
		if (y == 'Y') {
			printf("确认成功！");
		}
		else {
			printf("程序结束");
		}
		return 0;
}	
	
	for循环
	C语言的for循环语法和JS一模一样，执行流程也一样，这里简单写一下语法，不懂可以看原视频P10/53 min
	语法：
			for(表达式1；表达式2；表达式4){
				语句3....		//按需要顺序执行程序
			}
	一些建议：
		1. 不可在循环体内修改循环变量，防止for循环失去控制
		2. 建议for语句的循环控制变量的取值采用'前闭后开区间'写法
	
	for循环的变种：
		//变种一
		for(;;){		//for循环的初始化、判断、调整时都可以省略的，如果全部省略时也就是恒为真，就会是一个死循环，要慎用
			语句....
		}
		//变种二
		int x,y;
		for(x=0,y=0; x<2 && y<5; ++x,y++){
			printf("呵呵");		//这里只会打印2个呵呵，因为要两个条件同时满足才会执行这行代码
		}
	
	do...while循环
	语法：
		do{
			循环语句...
		}while(条件表达式);
	和JS相同，也是至少执行一次	
	一些小方法：
	1. 我们程序执行时，如果想让程序执行的时候暂停一下，或者休息一下，可以使用Sleep()方法，加上头文件<window.h>
		用法如：Sleep(1000);  //这里1000的单位时毫秒，也就是1秒		
	2. 我们如果要执行到某条代码的时候要清空当前窗口中的打印值，可以使用system("cls");		//这是执行系统命令的一个函数，cls意为清空屏幕
		前面需要加上头文件<stdlib.h>
	3. 我们要是需要比较两个字符串是否全等，不能使用全等操作符'=='，要用strcmp()方法，前面加上头文件<string.h>
		用法如：strcmp("abc","abc");  //只能比较两个字符串是否全等，全等返回0，左边的字符串大返回-1，右边字符串大返回1
	4. 我们有时候可能需要生成一个随机数，这时候我们可以使用rand()来生成一个随机数，如int a = rand(); 
			但是我们这样做以后每次程序执行后生成的随机数都是一样的，不够随机
				这时候我们还需要引入一个srand()函数，这个函数的括号内还需要放一个不固定的数值，这时候就麻烦了生成不固定的随机数要用srand()函数
					可是括号内又需要放一个不固定的随机数，这时候其实我们可以使用时间戳的概念，时间是随时变化的嘛
					所以括号内可以填(unsigned int)time(NULL)，引入时间戳，完整写法如：
					#include <stdlib.h>		//两个头文件不可少
					#include <time.h>
					srand((unsigned int)time(NULL));
					int a = rand() %100 + 1;		//这里意思为生成0到100的随机数，默认是0到37777
	
	goto语句
	- C语言中提供了可以随便滥用的goto语句和标记跳转标号
		//在c语言中哪里都可以用goto语句，既然他哪里都可以用，那么它有可能有一些破坏性的动作，所以一般不建议使用goto语句
	语法：
	again:
		printf("你好！");
		goto again;		//这里演示了用goto语句做一个死循环时的情况，这里goto again之后，就会跳转到前面'again:'这里，导致程序死循环
	//由于goto语句可以随便跳转，打乱了原本程序由上至下的结构，所以如果不注意容易写出bug
	
	- 其实goto语句更适合跳出循环，如：
		for(...){
			for(...){
				for(...){
					if(...)
						goto again;		//如果没有goto语句的话，需要一层一层循环用break退出才能到again后面的语句，而现在我们可以直接使用goto语句退出循环
				}
			}
		}
		again:
			printf("你好！");
	
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					