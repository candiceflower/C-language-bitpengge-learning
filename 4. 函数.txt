函数：
	函数的概念：
	- 函数是一个大型程序的某部分代码，有一个或多个语句组成，负责完成某项特定的任务，相较于其他代码，具备相对的独立性
	- 一般有输入参数并有返回值，提供对过程的封装和细节的隐藏，这些代码通常被称为软件库
	
	分类：
		1. 库函数
			C语言本身提供给我们的函数
		2. 自定义函数
			语法：
				返回值类型 函数名(形参1，形参2...){
						语句....
				}
		
	一些简单的库函数：
	strcpy：		//string copy
		字符串拷贝。需要加上头文件<stdio.h>
		语法：strcpy(目的地址,源地址)
	memset：
		将字符串的前几个位置转换成某个字符，语法：memset(目标字符,转换字符,数量);  
		如：char a[] = "hello world";
				memset(a,'*',5);		//这样就会把a的前5个字符hello转换成'*'
				
	形参和实参
	- 实参
		真实传给函数的参数，叫实参，实参可以是任何值，包括函数，不过在函数调用时，必须要有确定的值，以便传给形参
	- 形参
		就是函数后面括号内的值，只有函数被调用时才实例化，函数调用完成自动销毁，因此形参只在函数作用域内有效
		形参实例化后，相当于实参的临时拷贝
		
	函数的调用：
	- 传值调用：
		如：
				int game(int a,int b){ ; }
				int main(){ game(10,20); }
				//这里就会把10和20的值传入到形参a和b当中
	- 传址调用：
		如：
			int game(int* a,int* b){ int t1 = *a; int t2 = *b }
			int main(){ game(&x , &y); }
			//这里就把变量x和y的地址传入到指针变量a和b当中，我们调用指针变量的时候同样要用'*'来解包
		注意：我们传入数组作为实参传入形参的时候，传过去的不是数组，而是第一个元素的地址，所以必要要用传址调用法
		
		以下是模拟strlen函数的一个自定义函数：
		#include <stdio.h>
		//下面这个函数可以计算字符串长度
		int length(char* x) {		//由于数组作为实参传入的是第一个元素的地址，所以这里要用指针变量
			int count = 0;
			while (*x != '\0') {		//如果解指针之后的字符不是'\0'就继续循环
				count++;	//循环一次次数+1
				x++;		//获取下一位的地址
			}
			return count;
		}

		int main() {
			char arr[] = "hello";
			int len = length(arr);   
			printf("len = %d\n", len);
			return 0;
		}
			
	函数的声明
		- 告诉编译器函数叫什么，参数是什么，返回类型是什么，但是具体是否存在，无关紧要
			语法如：
			#ifndef __add_h__		//如果头文件没有被声明过，引入下面的代码
			#define __add_h__
			//上面两行代码具体操作在最后一节课会将
			int Add(int, int);		<--这节课主要时这个函数声明

			#endif		//结束
		- 函数声明一般出现在函数使用之前，要满足先声明后使用
		- 函数的声明一般放在头文件中
			头文件中放函数的声明，然后创建一个'.c'文件放函数的内容，最后我们用'#include "头文件.h"'，自己创建的用""引号包含，库函数用<>包含
		
	递归
	- 什么是递归：
		程序调用自身的编程技巧称为递归，递归的主要思考方式为：把大事化小
	
	递归的两个必要条件
		- 存在条件限制，当满足这个条件之后，递归不再继续。
		- 每次递归调用后越来越接近这个限制条件
		
		上面的返回字符串长度那一题，如果不允许使用临时变量count，我们还可以用递归来做：
		#include <stdio.h>
		//原理：
		反复调用length这个函数，然后如果字符不是等于0的话，返回1+下次调用函数的返回值
		int length(char* x) {
			if (*x != '\0') {
				return 1 + length(x + 1);
			}						//如果字符串的字符不是等于\0就会一直调用递归
			else {
				return 0;		//一旦等于\0就会停止递归了，这个套注意
			}
		}

		int main() {
			char arr[] = "hello";
			int a = strlen(arr);
			int len = length(arr);
			printf("len = %d\n", len);
			return 0;
		}
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		