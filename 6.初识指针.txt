指针
	- 指针其实是个变量，用于存放内存中的地址（编号）
	- 指针是用来存放地址的，地址是唯一标识一块空间的
	- 指针的大小在32为平台是4个字节，在64位平台是8个字节
指针类型的意义
	- 指针类型决定了指针进行解引用操作的时候，能够访问空间的大小
		如：
			int a = 10;
			char* b = &a;
			*b = 0;
			如果这样做我们会发现*b的结果不是我们想要的，因为int在内存里开辟了4个字节的位置，而char*只占用了一个字节
				所以我们在调用指针变量的时候，最好和原变量的类型一致
	- 当然，有特殊需求的时候也可以这么做，我们只需要调用一个字节的时候可以用char*指针，两个字节的时候可以用short指针.....
	- 指针类型还决定了指针走一步能走多远（指针的步长）
		int* a;  a --> 4
		char* a; a --> 1

野指针
- 野指针就是指针指向的位置是不可知的，随机的.....
- 成因：
	1. 未初始化
		int main() {
			int* p;		//这是未初始化的指针，指向的是一个随机的位置
			*p = 20;
			return 0;
		}
	2. 指针越界
		int main() {
		int arr[10] = { 0 };
		int* p = arr;
		int i = 0;
		for (; i < 12; i++) {
			p++;		//由于我们的数组只有10位，所以当p++加到超过10的时候，就会指针越界
		}
		return 0;
	}
	3. 指针指向的空间释放
		test() {
			int a = 10;
			return &a;
		}
		int main() {
			int* p = test();	//这里调用test函数，并将返回的地址放到p里面了
			*p = 20;				但是这里会出现一个问题，就是test在调用结束的时候已经被释放了，而p还指向着这片空间
			return 0;
		}
- 如何避免野指针
	1. 指针初始化   //如果我们知道初始化为什么值的时候，我们可以用'&'变量，但是如果实在不知道时，我们可以初始化为NULL
	2. 小心指针越界
	3. 指针指向空间释放即改为NULL		
	4. 指针使用之前检查有效性		//如果前面几条都有认真做到的话，我们在使用指针前，可以用if语句判断一下，if(p != NULL){ 执行指针 };
	
指针运算
- 指针+-整数
- 指针-指针
- 指针的关系运算
	
	# 指针+-整数
		示例：
			int main() {
			int arr[] = { 1,2,3,4,5,6,7,8,9,10 };
			int i = 0;
			int sz = sizeof(arr) / sizeof(arr[0]);
			int* p = arr;
			for (i = 0; i < sz; i++) {
				printf("%d ", *p);	//读出p地址中存放的内容
				p++;		//指针的位置+1
			}
			return 0;
		}
	# 指针-指针
		- 指针-指针返回的是中间字符的个数，注意两边指针的类型要相同
		示例：
			int main() {
				char ch[] = { 0 };
				int arr[] = { 1,2,3,4,5,6,7,8,9,10 };
				printf("%d\n", &arr[9] - &arr[0]);	//这里打印的是9，因为他们之间的间隔为9
				printf("%d\n", &arr[9] - &ch[0]);	//这里打印的值是不确定的，我们不应该这样去做
				return 0;
			}
		- 标准规定：允许指针于数组元素最后一个元素的后一个位置比较，但不能于数组元素第一个的前一个位置比较！不清楚可看P24
	# 指针-数组
	通常情况下数组名表示首元素的地址，但是有两个例外：
		1. &数组名 -> 这里表示的不是首元素的地址，而是表示整个数组 -> 取出来的是整个数组，只不过显示的时候值显示首元素的地址
		2. sizeof(数组名) -> 数组名表示的是整个数组 -> 计算的是整个数组的字节长度
	
- 二级指针
	当我创建一个变量的时候，我们可以用&取出它的地址并放到一个指针变量中，当我们&地址这个指针变量的时候，我们又可以把这个指针变量放到一个二级指针当中
	如：	
		int a = 10;	
		int* one = &a;		//创建一个一级指针存放变量地址
		int** two = &one;	//创建二级指针，前面两个*，存放一级指针的地址
		int*** three = &two;
		....
	二级指针的使用
		和一级指针解引用时一样，我们只需要在对面加上对应的*就可
		接上举例：
		printf("%d\n",**two);	//第二颗*表示的是one的地址，我们再解引用one就可以找到a啦
		printf("%d\n",***three);  //同理
		
- 指针数组和数组指针
	指针数组 -> 存放指针的数组
	数组指针 -> 存放数组的指针
	//要注意两者的区别
	创建指针数组和普通数组相同，只不过前面的类型要加上*
	如：
		int a = 10;
		int b = 20;
		int c = 30;
		int* arr[] = { &a, &b, &c };
	































	