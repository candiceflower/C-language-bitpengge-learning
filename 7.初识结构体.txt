初识结构体
> 结构体的基础知识
	- 结构是一些值的集合，这些值称为成员变量，结构的每个成员可以是不同类型的变量。

> 结构体的声明
	- 语法：
		struck 结构体名
		{
			member-list;
		}variable-list;
	- 如：	
		<方法一>
		struct Student {		//struct 结构体关键字  Student 结构体标签   struct Student 结构体类型
			//成员变量
			char name[20];
			short age;		
		}s1,s2,s3;	//这三个是利用Student这个结构体类型创造的三个全局结构体变量
		
		int main() {
			struct Student s;		//创建结构体变量
			return 0;					//注意：上面创建结构体类型时是不占用内存空间的，只有创建结构体变量时才会
		}
		
		<方法二>		//建议使用
		typedef struct Student {		//可以使用tyoedef重定义结构体的名称
			char name[20];
			short age;
		}Stu;		

		int main() {
			Stu s;		//这里的效果和原来写全称是一样的
			return 0;
		}
		
> 结构体的类型
	- 结构体的成员可以是标量、数组、指针、甚至是其他结构体
	我们在使用结构体的时候，需要按结构体内部声明的变量，按顺序输入，如：
	Stu s = {"孙悟空",18};		//这就声明了一个结构体变量
	printf("name = %s",s.name)		//调用的时候可以使用"."进行调用
		
> 结构体的访问
	我们把结构体作为实参进行传递的时候，最好地址传参，函数对应接受的形参最好是指针变量
		不建议使用普通结构体变量传参，不然会使程序多拷贝一份一模一样的结构体变量
	如：
	print(T* p) {		//我们指针变量只占用了内存中4或8字节的空间，之后使用"->"同样可以访问原数据
		printf("%c\n", p->t);
		printf("%s\n", p->y.name);
		printf("%d\n", p->y.age);
		printf("%d\n", *(p->s));
	}

	int main() {
		int num = 10;
		T x = { 'A',{"张三",18},&num };
		print(&x);
		return 0;
	}
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		